{% extends 'base.html.twig' %}

{% block title %}RAG Chatbot{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .chat-container {
            height: 65vh;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            background-color: #f9f9f9;
        }

        .chat-input-container {
            display: flex;
            padding: 10px;
            background-color: #fff;
            border-top: 1px solid #e0e0e0;
        }

        .chat-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }

        .send-button {
            margin-left: 10px;
            padding: 10px 20px;
            border: none;
            border-radius: 20px;
            background-color: #4c6ef5;
            color: white;
            cursor: pointer;
        }

        .message {
            margin-bottom: 15px;
            max-width: 80%;
        }

        .message-user {
            margin-left: auto;
            background-color: #4c6ef5;
            color: white;
            border-radius: 18px 18px 0 18px;
            padding: 10px 15px;
        }

        .message-assistant {
            margin-right: auto;
            background-color: #e9ecef;
            color: #212529;
            border-radius: 18px 18px 18px 0;
            padding: 10px 15px;
        }

        .message-time {
            font-size: 0.75rem;
            color: #6c757d;
            margin-top: 5px;
            text-align: right;
        }

        .status-indicator {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .status-online {
            background-color: #28a745;
            color: white;
        }

        .status-offline {
            background-color: #dc3545;
            color: white;
        }

        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-3">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">RAG Chatbot Status</h5>
                    </div>
                    <div class="card-body">
                        <h6>API Status</h6>
                        <span class="status-indicator status-offline">Disconnected</span>

                        <hr>
                        <h6>Upload PDF</h6>
                        <form id="uploadForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <input type="file" class="form-control form-control-sm" id="pdfFile" name="pdf_file" accept="application/pdf">
                            </div>
                            <button type="submit" class="btn btn-primary btn-sm">Upload & Process</button>
                        </form>

                        <hr>
                        <div class="d-grid gap-2">
                            <button id="resetChatBtn" class="btn btn-outline-secondary btn-sm">Reset Chat</button>
                            <button id="clearDatabaseBtn" class="btn btn-outline-danger btn-sm">Clear Document Database</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-9">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Chat with your Documents</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="chat-container">
                            <div class="chat-messages" id="chatMessages">
                                <div class="text-center text-muted py-5">
                                    <p>Start a conversation with your documents</p>
                                    <p class="text-danger">Please upload PDF documents first</p>
                                </div>
                            </div>
                            <div class="chat-input-container">
                                <input type="text" class="chat-input" id="messageInput" placeholder="Type your message..." disabled>
                                <button class="send-button" id="sendButton" disabled>
                                    <span id="sendText">Send</span>
                                    <div id="loadingSpinner" class="loading-spinner"></div>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascript %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const API_BASE = 'http://127.0.0.1:8001';
            const chatMessages = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const sendText = document.getElementById('sendText');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const uploadForm = document.getElementById('uploadForm');
            const resetChatBtn = document.getElementById('resetChatBtn');
            const clearDatabaseBtn = document.getElementById('clearDatabaseBtn');
            const statusIndicator = document.querySelector('.status-indicator');

            function scrollToBottom() {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function addMessage(message, isUser = true) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message message-${isUser ? 'user' : 'assistant'}`;
                messageDiv.innerHTML = message.content.replace(/\n/g, '<br>');

                const timeDiv = document.createElement('div');
                timeDiv.className = 'message-time';
                timeDiv.textContent = new Date().toLocaleTimeString();
                messageDiv.appendChild(timeDiv);

                chatMessages.appendChild(messageDiv);
                scrollToBottom();
            }

            function setLoading(isLoading) {
                sendText.style.display = isLoading ? 'none' : 'block';
                loadingSpinner.style.display = isLoading ? 'block' : 'none';
                messageInput.disabled = isLoading;
                sendButton.disabled = isLoading;
            }

            async function sendMessage() {
                const message = messageInput.value.trim();
                if (!message) return;

                addMessage({ content: message }, true);
                messageInput.value = '';
                setLoading(true);

                try {
                    const response = await fetch(`${API_BASE}/chat`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: new URLSearchParams({ message })
                    });

                    const data = await response.json();
                    if (data.success) {
                        addMessage(data.message, false);
                    } else {
                        throw new Error(data.error || 'Unknown error occurred');
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                } finally {
                    setLoading(false);
                }
            }

            async function uploadPdf(formData) {
                try {
                    const response = await fetch(`${API_BASE}/upload`, {
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json();
                    if (data.success) {
                        alert(data.message);

                        // âœ… Update chat status and enable UI
                        messageInput.disabled = false;
                        sendButton.disabled = false;
                        statusIndicator.classList.remove('status-offline');
                        statusIndicator.classList.add('status-online');
                        statusIndicator.textContent = 'Connected';

                        chatMessages.innerHTML = `
                        <div class="text-center text-muted py-5">
                            <p>You can now chat with your documents</p>
                        </div>
                    `;
                    } else {
                        throw new Error(data.error || 'Unknown error occurred');
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            }

            async function resetChat() {
                if (!confirm('Are you sure you want to clear the chat history?')) return;

                try {
                    const response = await fetch(`${API_BASE}/reset`, { method: 'POST' });
                    const data = await response.json();
                    if (data.success) {
                        chatMessages.innerHTML = `
                        <div class="text-center text-muted py-5">
                            <p>Start a conversation with your documents</p>
                        </div>
                    `;
                    } else {
                        throw new Error(data.error || 'Unknown error occurred');
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            }

            async function clearDatabase() {
                if (!confirm('Are you sure you want to clear all documents from the database?')) return;

                try {
                    const response = await fetch(`${API_BASE}/clear`, { method: 'POST' });
                    const data = await response.json();
                    if (data.success) {
                        alert(data.message);
                        location.reload();
                    } else {
                        throw new Error(data.error || 'Unknown error occurred');
                    }
                } catch (error) {
                    alert('Error: ' + error.message);
                }
            }

            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') sendMessage();
            });

            uploadForm.addEventListener('submit', function (e) {
                e.preventDefault();
                const fileInput = document.getElementById('pdfFile');
                if (!fileInput.files[0]) {
                    alert('Please select a PDF file');
                    return;
                }
                const formData = new FormData();
                formData.append('pdf_file', fileInput.files[0]);
                uploadPdf(formData);
            });

            resetChatBtn.addEventListener('click', resetChat);
            clearDatabaseBtn.addEventListener('click', clearDatabase);

            scrollToBottom();
        });
    </script>
{% endblock %}
