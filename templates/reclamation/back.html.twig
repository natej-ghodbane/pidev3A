{% extends 'base-back.html.twig' %}
  

{% block title %}Gestion des Réclamations{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/main.min.css" rel="stylesheet">
    <style>
        .chart-container {
            position: relative;
            height: 250px;
            width: 100%;
            margin-bottom: 20px;
        }
        .sort-link {
            color: inherit;
            text-decoration: none;
        }
        .sort-link:hover {
            text-decoration: underline;
        }
        .sort-icon {
            margin-left: 5px;
        }
        .filter-form {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        #calendar-container {
            height: 700px;
            margin: 20px 0;
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        .fc {
            font-family: 'Nunito', sans-serif;
            --fc-border-color: #e5e7eb;
            --fc-today-bg-color: rgba(78, 115, 223, 0.1);
            --fc-neutral-bg-color: #fff;
            --fc-list-event-hover-bg-color: #f8f9fa;
        }
        .fc-toolbar-title {
            font-size: 1.75em !important;
            font-weight: 700 !important;
            color: #2c3e50;
            text-transform: capitalize;
        }
        .fc-button-primary {
            background-color: #4e73df !important;
            border-color: #4e73df !important;
            color: white !important;
            padding: 10px 20px !important;
            font-weight: 600 !important;
            font-size: 0.9em !important;
            border-radius: 6px !important;
            transition: all 0.3s ease !important;
            text-transform: capitalize !important;
        }
        .fc-button-primary:hover {
            background-color: #2e59d9 !important;
            border-color: #2e59d9 !important;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(46, 89, 217, 0.2) !important;
        }
        .fc-button-primary:not(:disabled):active,
        .fc-button-primary:not(:disabled).fc-button-active {
            background-color: #2e59d9 !important;
            border-color: #2e59d9 !important;
            box-shadow: inset 0 3px 5px rgba(0,0,0,0.125) !important;
        }
        .fc-daygrid-day {
            transition: background-color 0.2s ease;
        }
        .fc-daygrid-day:hover {
            background-color: #f8f9fa;
        }
        .fc-daygrid-day-number {
            font-weight: 600;
            color: #2c3e50;
            padding: 8px !important;
            font-size: 1em !important;
        }
        .fc-day-today {
            background-color: rgba(78, 115, 223, 0.1) !important;
        }
        .fc-day-today .fc-daygrid-day-number {
            color: #4e73df !important;
        }
        .fc-event {
            border: none !important;
            padding: 4px 8px !important;
            margin: 2px !important;
            border-radius: 6px !important;
            font-size: 0.85em !important;
            font-weight: 500 !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
        }
        .fc-event:hover {
            transform: translateY(-2px) !important;
            box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
        }
        .fc-event-en-cours {
            background-color: #ffc107 !important;
            border-color: #ffc107 !important;
            color: #000 !important;
        }
        .fc-event-resolue {
            background-color: #28a745 !important;
            border-color: #28a745 !important;
            color: #fff !important;
        }
        .fc-event-rejetee {
            background-color: #dc3545 !important;
            border-color: #dc3545 !important;
            color: #fff !important;
        }
        .calendar-filters {
            margin-bottom: 25px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .form-check-input {
            width: 1.2em;
            height: 1.2em;
            margin-top: 0.25em;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .form-check-input:checked {
            background-color: #4e73df;
            border-color: #4e73df;
        }
        .form-check-label {
            cursor: pointer;
            font-weight: 500;
            padding-left: 4px;
        }
        .calendar-legend {
            display: flex;
            justify-content: center;
            gap: 25px;
            margin-top: 25px;
            flex-wrap: wrap;
            padding: 15px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .legend-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 16px;
            border-radius: 6px;
            background-color: #f8f9fa;
            transition: all 0.2s ease;
        }
        .legend-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .legend-color {
            width: 14px;
            height: 14px;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .event-tooltip {
            position: absolute;
            z-index: 1000;
            background: white;
            border: none;
            padding: 12px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            max-width: 300px;
            font-size: 0.9em;
            line-height: 1.5;
        }
        .fc-timegrid-slot {
            height: 48px !important;
        }
        .fc-timegrid-axis {
            padding: 10px !important;
            font-weight: 500;
        }
        .fc-list-day-cushion {
            padding: 12px 16px !important;
            background-color: #f8f9fa !important;
        }
        .fc-list-event {
            padding: 8px 16px !important;
            transition: background-color 0.2s ease;
        }
        .fc-list-event:hover {
            background-color: #f8f9fa !important;
        }
        @media (max-width: 768px) {
            #calendar-container {
                height: 600px;
                padding: 15px;
            }
            .fc-toolbar-title {
                font-size: 1.25em !important;
            }
            .fc-button-primary {
                padding: 8px 12px !important;
                font-size: 0.8em !important;
            }
            .calendar-filters {
                padding: 15px;
                gap: 15px;
            }
            .legend-item {
                padding: 6px 12px;
            }
        }
    </style>
{% endblock %}

{% block body %}
    <main id="main" class="main">
        <div class="pagetitle">
            <h1>Gestion des Réclamations</h1>
            <nav>
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ path('app_admin') }}">Dashboard</a></li>
                    <li class="breadcrumb-item active">Réclamations</li>
                </ol>
            </nav>
        </div>

        <section class="section">
            <div class="row">
                <div class="col-lg-3 col-md-6">
                    <div class="card info-card">
                        <div class="card-body">
                            <h5 class="card-title">Total Réclamations</h5>
                            <div class="chart-container">
                                <canvas id="totalChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-6">
                    <div class="card info-card">
                        <div class="card-body">
                            <h5 class="card-title">État des Réclamations</h5>
                            <div class="chart-container">
                                <canvas id="etatChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Réclamations par type</h5>
                            <div class="chart-container">
                                <canvas id="typeChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Évolution mensuelle</h5>
                            <div class="chart-container">
                                <canvas id="evolutionChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Calendar Section -->
            <div class="row mb-4">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Calendrier des Réclamations</h5>
                            
                            <div class="calendar-filters">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input filter-state" type="checkbox" id="filter-en-cours" value="En cours" checked>
                                    <label class="form-check-label" for="filter-en-cours">En cours</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input filter-state" type="checkbox" id="filter-resolue" value="Résolue" checked>
                                    <label class="form-check-label" for="filter-resolue">Résolue</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input filter-state" type="checkbox" id="filter-rejetee" value="Rejetée" checked>
                                    <label class="form-check-label" for="filter-rejetee">Rejetée</label>
                                </div>
                            </div>
                            
                            <div id="calendar-container"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Filtres</h5>
                            <form method="get" class="filter-form">
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <label for="type" class="form-label">Type</label>
                                        <select name="type" id="type" class="form-select">
                                            <option value="">Tous les types</option>
                                            {% for type in types %}
                                                <option value="{{ type }}" {% if currentType == type %}selected{% endif %}>
                                                    {{ type }}
                                                </option>
                                            {% endfor %}
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="etat" class="form-label">État</label>
                                        <select name="etat" id="etat" class="form-select">
                                            <option value="">Tous les états</option>
                                            {% for etat in etats %}
                                                <option value="{{ etat }}" {% if currentEtat == etat %}selected{% endif %}>
                                                    {{ etat }}
                                                </option>
                                            {% endfor %}
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="search" class="form-label">Recherche</label>
                                        <div class="input-group">
                                           <input type="text" id="search" class="form-control" placeholder="Rechercher par description...">

                                            <button class="btn btn-outline-secondary" type="submit">
                                                <i class="bi bi-search"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <button type="submit" class="btn btn-primary">Filtrer</button>
                                        <a href="{{ path('reclamationBack') }}" class="btn btn-secondary">Réinitialiser</a>
                                    </div>
                                </div>
                            </form>

                            <h5 class="card-title">Liste des Réclamations</h5>

                            {% for message in app.flashes('success') %}
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    {{ message }}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            {% endfor %}

                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'idRec',
                                                    'direction': currentSort == 'idRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    ID
                                                    {% if currentSort == 'idRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'descriptionRec',
                                                    'direction': currentSort == 'descriptionRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    Description
                                                    {% if currentSort == 'descriptionRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'dateRec',
                                                    'direction': currentSort == 'dateRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    Date
                                                    {% if currentSort == 'dateRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'typeRec',
                                                    'direction': currentSort == 'typeRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    Type
                                                    {% if currentSort == 'typeRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'etatRec',
                                                    'direction': currentSort == 'etatRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    État
                                                    {% if currentSort == 'etatRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="all">
    {% for reclamation in reclamations %}
        <tr>
            <td>{{ reclamation.idRec }}</td>
            <td>{{ reclamation.descriptionRec }}</td>
            <td>{{ reclamation.dateRec ? reclamation.dateRec|date('Y-m-d H:i:s') : '' }}</td>
            <td>{{ reclamation.typeRec }}</td>
            <td>
                <span class="badge bg-{{ reclamation.etatRec == 'En cours' ? 'warning' : (reclamation.etatRec == 'Résolue' ? 'success' : 'danger') }}">
                    {{ reclamation.etatRec }}
                </span>
            </td>
            <td>
                <a href="{{ path('app_reclamation_show', {'id_rec': reclamation.idRec}) }}" class="btn btn-sm btn-info">
                    <i class="bi bi-eye"></i>
                </a>
            </td>
        </tr>
    {% else %}
        <tr>
            <td colspan="6" class="text-center">Aucune réclamation trouvée</td>
        </tr>
    {% endfor %}
</tbody>

<tbody id="searchtab"></tbody>

                                </table>
                            </div>
                            <div class="col-12 mt-3">
                                <a href="{{ path('generatePDF') }}" class="btn btn-primary">
                                    <i class="bi bi-file-pdf"></i> Générer PDF
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.11/locales/fr.global.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
$(document).ready(function() {
    let typingTimer; // Variable to hold the timeout
    const delay = 300; // Delay in milliseconds (0.3 seconds)

    $("#search").keyup(function() {
        clearTimeout(typingTimer); // Clear the previous timer

        var value = $(this).val();

        typingTimer = setTimeout(function() {
            if (value.trim() === '') {
                $('#all').show();
                $('#searchtab').empty();
                return;
            }

            $.ajax({
                url: "{{ path('reclamation_search') }}",
                type: 'GET',
                data: { 'searchValue': value },
                dataType: 'json',
                success: function(data) {
                    $('#searchtab').empty();
                    $('#all').hide();

                    if (data.length > 0) {
                        $.each(data, function(i, reclamation) {
                            $('#searchtab').append(
                                '<tr>' +
                                    '<td>' + reclamation.idRec + '</td>' +
                                    '<td>' + reclamation.descriptionRec + '</td>' +
                                    '<td>' + (reclamation.dateRec ? reclamation.dateRec : '') + '</td>' +
                                    '<td>' + reclamation.typeRec + '</td>' +
                                    '<td><span class="badge bg-' + 
                                        (reclamation.etatRec === 'En cours' ? 'warning' : (reclamation.etatRec === 'Résolue' ? 'success' : 'danger')) + '">' +
                                        reclamation.etatRec +
                                    '</span></td>' +
                                    '<td><a href="/reclamation/show/' + reclamation.idRec + '" class="btn btn-sm btn-info"><i class="bi bi-eye"></i></a></td>' +
                                '</tr>'
                            );
                        });
                    } else {
                        $('#searchtab').html('<tr><td colspan="6" class="text-center">Aucune réclamation trouvée</td></tr>');
                    }
                },
                error: function() {
                    alert('Erreur lors de la récupération des données.');
                }
            });
        }, delay); // Execute after delay
    });
});


</script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Total Réclamations Chart
            new Chart(document.getElementById('totalChart'), {
                type: 'doughnut',
                data: {
                    labels: ['Ce mois', 'Autres mois'],
                    datasets: [{
                        data: [{{ stats.moisActuel }}, {{ stats.total - stats.moisActuel }}],
                        backgroundColor: ['#4e73df', '#1cc88a']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // État des Réclamations Chart
            new Chart(document.getElementById('etatChart'), {
                type: 'pie',
                data: {
                    labels: ['En cours', 'Résolues', 'Rejetées'],
                    datasets: [{
                        data: [{{ stats.enCours }}, {{ stats.resolues }}, {{ stats.rejetees }}],
                        backgroundColor: ['#f6c23e', '#1cc88a', '#e74a3b']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Réclamations par type Chart
            const typeData = {
                labels: [],
                values: []
            };
            {% for type, nombre in stats.parType %}
                typeData.labels.push("{{ type }}");
                typeData.values.push({{ nombre }});
            {% endfor %}

            new Chart(document.getElementById('typeChart'), {
                type: 'bar',
                data: {
                    labels: typeData.labels,
                    datasets: [{
                        label: 'Nombre de réclamations',
                        data: typeData.values,
                        backgroundColor: '#36b9cc',
                        borderRadius: 5
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });

            // Évolution mensuelle Chart
            const evolutionData = {
                labels: [],
                values: [],
                previousValues: []
            };
            {% set prevValue = null %}
            {% for mois, nombre in stats.parMois %}
                evolutionData.labels.push("{{ mois }}");
                evolutionData.values.push({{ nombre }});
                {% if prevValue is not null %}
                    {% set evolution = ((nombre - prevValue) / prevValue * 100)|round(2) %}
                    evolutionData.previousValues.push({{ evolution }});
                {% else %}
                    evolutionData.previousValues.push(0);
                {% endif %}
                {% set prevValue = nombre %}
            {% endfor %}

            new Chart(document.getElementById('evolutionChart'), {
                type: 'line',
                data: {
                    labels: evolutionData.labels,
                    datasets: [{
                        label: 'Nombre de réclamations',
                        data: evolutionData.values,
                        borderColor: '#4e73df',
                        backgroundColor: 'rgba(78, 115, 223, 0.1)',
                        tension: 0.1,
                        fill: true
                    }, {
                        label: 'Évolution (%)',
                        data: evolutionData.previousValues,
                        borderColor: '#1cc88a',
                        borderDash: [5, 5],
                        tension: 0.1,
                        yAxisID: 'percentage'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        },
                        percentage: {
                            position: 'right',
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        }
                    }
                }
            });

            // Calendar Initialization
            let allEvents = [];
            let filteredEvents = [];
            let calendar = null;
            
            // Function to filter events based on selected states
            function filterEvents() {
                const selectedStates = Array.from(document.querySelectorAll('.filter-state:checked'))
                    .map(checkbox => checkbox.value);
                
                filteredEvents = allEvents.filter(event => selectedStates.includes(event.extendedProps.etat));
                if (calendar) {
                    calendar.removeAllEvents();
                    calendar.addEventSource(filteredEvents);
                }
            }
            
            // Initialize calendar
            const calendarEl = document.getElementById('calendar-container');
            if (calendarEl) {
                calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    locale: 'fr',
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
                    },
                    events: function(info, successCallback, failureCallback) {
                        fetch("{{ path('app_reclamation_calendar_events') }}")
                            .then(response => response.json())
                            .then(data => {
                                allEvents = data;
                                filterEvents();
                                successCallback(filteredEvents);
                            })
                            .catch(error => {
                                console.error('Error fetching events:', error);
                                failureCallback(error);
                            });
                    },
                    eventDidMount: function(info) {
                        // Add state-based class
                        if (info.event.extendedProps.etat) {
                            info.el.classList.add('fc-event-' + info.event.extendedProps.etat.toLowerCase().replace(/\s+/g, '-'));
                        }
                        
                        // Add tooltip
                        info.el.title = `Type: ${info.event.extendedProps.type}
Description: ${info.event.extendedProps.description}
État: ${info.event.extendedProps.etat}`;
                    },
                    eventClick: function(info) {
                        if (info.event.url) {
                            window.location.href = info.event.url;
                            return false;
                        }
                    },
                    firstDay: 1,
                    height: 'auto',
                    dayMaxEvents: true,
                    navLinks: true,
                    weekNumbers: true,
                    nowIndicator: true,
                    businessHours: true
                });
                
                calendar.render();
                
                // Add event listeners for filters
                document.querySelectorAll('.filter-state').forEach(checkbox => {
                    checkbox.addEventListener('change', filterEvents);
                });
            }
        });
    </script>
{% endblock %}